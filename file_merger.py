# -*- coding: utf-8 -*-
"""File Merger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clI3rWnEySpK9ajCbXDXpi58bKylsh-I

# Program Execution

To simplify the process of uploading files, Google Colab provides a built-in module called files

To get started, follow these steps:

1. Open your Google Colab notebook You can upload files with ease. Here's an example of how to upload a file using the uploaded object:

    a) Hover over the [ ] symbol in a coding cell, this will bring up a "play" buttion.

    b) Select the play button

  This will cause a file picker dialog box to appear, allowing you to choose the file you want to upload.

2. Select the desired file from your local machine, and it will be uploaded to your Colab environment.
3. After uploading the file, the uploaded object will contain the uploaded file's information, such as the file name and its content. You can then perform further processing, analysis, or visualization on the uploaded file within your Colab notebook.

**Please note that the uploaded file remains available only for the current Colab session. If you restart or disconnect from the session, you'll need to re-upload the file. Therefore, it's recommended to include the file upload step as part of your notebook's initialization or whenever you need to work with specific files**
"""

from google.colab import files
uploaded = files.upload()

"""
This code performs a task of merging data from two Excel files into a single file. Let's break it down step by step:

1.   The code begins by importing the pandas library under the name 'pd'. Pandas is a popular library for data manipulation and analysis in Python.

2.   The code defines a function called 'merge_excel_files' that takes five parameters: 'file1', 'file2', 'sheet1', 'sheet2', and 'output_file'. These parameters represent the filenames of the two Excel files, the names of the sheets within each file that we want to merge, and the desired filename for the output file.

3.   Inside the function, the Excel files are read using the 'pd.ExcelFile' function from pandas. The 'file1' and 'file2' parameters are used to create instances of 'ExcelFile', which allow us to access the contents of the files.

4.   Next, the code uses the 'parse' function to read the specified sheets from each Excel file. The 'sheet1' and 'sheet2' parameters are used to specify which sheets to read. The data from these sheets is stored in the variables 'df1' and 'df2', respectively.

5.   The code then merges the two dataframes, 'df1' and 'df2', based on a common column called 'WI Unique Well No'. The 'pd.merge' function is used for this purpose, and the resulting merged dataframe is stored in the variable 'merged_df'. The 'how' parameter is set to 'inner', which means that only the rows with matching values in the specified column will be included in the merged dataframe.

6.   The merged dataframe is then saved to a new Excel file using the 'to_excel' function. The 'output_file' parameter specifies the filename for the output file, and the 'index' parameter is set to 'False' to exclude the index column from the saved file.

7.   Finally, a message is printed indicating the location where the merged data is saved.

8.   After defining the function, an example usage is provided. The filenames, sheet names, and output filename are assigned to variables, and then the 'merge_excel_files' function is called with these values as arguments.

In summary, this code allows you to merge specific sheets from two Excel files based on a common column and save the merged data to a new Excel file.




"""

import pandas as pd

def merge_excel_files(file1, file2, sheet1, sheet2, output_file):
    # Read the Excel file
    excel_file1 = pd.ExcelFile(file1)
    excel_file2 = pd.ExcelFile(file2)

    # Read the specified sheets from the Excel file
    df1 = excel_file1.parse(sheet1)
    df2 = excel_file2.parse(sheet2)

    # Merge the dataframes based on the 'Well Number' column
    merged_df = pd.merge(df1, df2, on='WI Unique Well No', how='inner')

    # Save the merged dataframe to a new Excel file
    merged_df.to_excel(output_file, index=False)
    print(f"Merged data saved to {output_file}")

# Example usage
file1 = 'Updated_Radium_Data.xlsx'
file2 = 'Sand and Gravel filtered DNR.xlsx'
sheet1 = 'Radium'
sheet2 = 'Sheet1'
output_file = 'All Wells Ra DNR Merged version 2.xlsx'

merge_excel_files(file1,file2, sheet1, sheet2, output_file)