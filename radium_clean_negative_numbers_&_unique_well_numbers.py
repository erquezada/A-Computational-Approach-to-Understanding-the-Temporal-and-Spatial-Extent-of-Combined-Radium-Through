# -*- coding: utf-8 -*-
"""Radium Clean Negative Numbers & Unique Well Numbers

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wdygbcIfzsudCNXtqZifRvouQYQS7nPL

# Program Execution:

To simplify the process of uploading files, Google Colab provides a built-in module called files

To get started, follow these steps:

1. Open your Google Colab notebook You can upload files with ease. Here's an example of how to upload a file using the uploaded object:

    a) Hover over the [ ] symbol in a coding cell, this will bring up a "play" buttion.

    b) Select the play button

  This will cause a file picker dialog box to appear, allowing you to choose the file you want to upload.

2. Select the desired file from your local machine, and it will be uploaded to your Colab environment.
3. After uploading the file, the uploaded object will contain the uploaded file's information, such as the file name and its content. You can then perform further processing, analysis, or visualization on the uploaded file within your Colab notebook.

**Please note that the uploaded file remains available only for the current Colab session. If you restart or disconnect from the session, you'll need to re-upload the file. Therefore, it's recommended to include the file upload step as part of your notebook's initialization or whenever you need to work with specific files**
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
# Function to process and display the uploaded file
def process_file(file):
    # Read the uploaded file into a DataFrame
    df = pd.read_excel(file)

    # Perform data processing or analysis on the DataFrame
    # ...
    print(df)

"""**Excel Data Reader:**

This program defines a class called ExcelDataReader, which contains several methods for reading and processing Excel data.

To run this program hit the "play" button, and the program will execute and generate a new sheet with the desired output.

***For an in depth, detailed overview please scroll down one cell below***





"""

class ExcelDataReader:
    def read_excel_file(self, file_path, sheet_name, column_name):
        df = pd.read_excel(file_path, sheet_name=sheet_name)
        specific_column = df[column_name]
        df.index = df.index + 1
        df.reset_index(drop=True, inplace=True)
        return specific_column

def process_excel_file(file_path, sheet_name, column_name):
    df = pd.read_excel(file_path, sheet_name=sheet_name)

    # Delete rows with negative values in the specified column
    df = df[df[column_name] >= 0]

    # Delete cells with an empty well number
    df = df.dropna(subset=[well_number_column])

    # Reset the index
    df.reset_index(drop=True, inplace=True)

    return df

def process_unique_well_numbers(df, column_name):
    unique_well_numbers = df[column_name].unique()
    # Perform further processing or calculations on the unique well numbers
    # ...

    return unique_well_numbers

# Specify the file path, sheet name, and column name
file_path = 'Ra Contamination in Public Water Supplies.xlsx'
sheet_name = 'All wells Ra DNR'
column_name = 'Measured Amount'
well_number_column = 'WI Unique Well No'

# Create an instance of ExcelDataReader
data_reader = ExcelDataReader()

# Call the read_excel_file method and store the returned column in a variable
column_data = data_reader.read_excel_file(file_path, sheet_name, column_name)

# Print the column data
print(column_data)

# Process the Excel file and obtain the updated DataFrame
processed_data = process_excel_file(file_path, sheet_name, column_name)

# Save the updated DataFrame to a new Excel file
output_file_path = 'Updated_Data.xlsx'
processed_data.to_excel(output_file_path, index=False)

print("\nNew Excel file has been generated:", output_file_path)

# Process the unique well numbers
unique_wells = process_unique_well_numbers(processed_data, well_number_column)
print("\nUnique Well Numbers:")
print(unique_wells)

"""# Code Walkthrough:

The read_excel_file method reads an Excel file from the specified file_path and extracts a specific column (column_name) from a specified sheet (sheet_name). It returns the values in that column.
"""

#def read_excel_file(self, file_path, sheet_name, column_name):
    #df = pd.read_excel(file_path, sheet_name=sheet_name)
    #specific_column = df[column_name]
    #df.index = df.index + 1
    #df.reset_index(drop=True, inplace=True)
    #return specific_column

"""The process_excel_file method reads an Excel file from the specified file_path and processes it in several steps:

1. It filters out rows with negative values in the specified column_name.
It removes cells with empty values in the well_number_column.

2. It resets the index of the DataFrame to ensure consecutive row numbering.

The method then returns the processed DataFrame.
"""

#def process_excel_file(self, file_path, sheet_name, column_name, well_number_column):
    #df = pd.read_excel(file_path, sheet_name=sheet_name)

    #Delete rows with negative values in the specified column
    #df = df[df[column_name] >= 0]

    #Delete cells with an empty well number
    #df = df.dropna(subset=[well_number_column])

    #Reset the index
    #df.reset_index(drop=True, inplace=True)

    #return df

"""The process_unique_well_numbers method takes the DataFrame and a column_name as inputs. It extracts the unique values from the specified column and performs further processing or calculations on those unique well numbers.

"""

#def process_unique_well_numbers(self, df, column_name):
  #unique_well_numbers = df[column_name].unique()
  #return unique_well_numbers

"""The code defines variables for the file path, sheet name, and column names to be used in the subsequent steps.


"""

# Specify the file path, sheet name, and column name
#file_path = 'Ra Contamination in Public Water Supplies.xlsx'
#sheet_name = 'All wells Ra DNR'
#column_name = 'Measured Amount'
#well_number_column = 'WI Unique Well No'

"""Call the read_excel_file method and store the returned column in a variable.

This data is then printed onto the console for validation purposes.

"""

#column_data = data_reader.read_excel_file(file_path, sheet_name, column_name)
# Print the column data
#print(column_data)

"""The process_excel_file method is called to process the Excel file. It removes rows with negative values and cells with empty well numbers. The resulting processed DataFrame is stored in the processed_data variable."""

# Process the Excel file and obtain the updated DataFrame
#processed_data = data_reader.process_excel_file(file_path, sheet_name, column_name, well_number_column)

"""The code specifies the output file path and a new sheet name for the processed data.

The Excel file is opened using pandas ExcelWriter, then the processed DataFrame is written to a new sheet.
"""

# Specify the output file path and sheet name for the processed data
#output_file_path = "Ra Contamination in Public Water Supplies.xlsx"
#sheet_name_new = 'Updated_All_wells_Ra_DNR'

# Open the Excel file using pandas ExcelWriter
#with pd.ExcelWriter(output_file_path, engine='openpyxl', mode='a') as writer:
# Write the processed DataFrame to a new sheet
#processed_data.to_excel(writer, sheet_name=sheet_name_new, index=False)

"""Finally, a message is printed to indicate that a new Excel sheet has been generated with the processed data."""

#print("\nNew Excel sheet has been generated:", output_file_path)

"""In summary, the code reads specific columns from an Excel file, performs data processing operations, and generates a new Excel sheet with the processed data."""