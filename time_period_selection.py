# -*- coding: utf-8 -*-
"""Time Period Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PjEHh3TSPLTBLtg5mRp7G9yhk676F6sL
"""

from google.colab import files
uploaded = files.upload()

from openpyxl import load_workbook
import pandas as pd
from datetime import datetime, timedelta

def timespan_excel_files(file, sheet1, output_file, start_date, end_date):
    # Convert start_date and end_date to datetime objects
    start_date = datetime.strptime(start_date, '%m/%d/%Y')
    end_date = datetime.strptime(end_date, '%m/%d/%Y')

    # Create an empty DataFrame to store the results
    result_data = pd.DataFrame()

    # Iterate over each year in the date range
    current_year = start_date.year
    while current_year <= end_date.year:
        # Calculate the start and end dates for the current year
        year_start_date = datetime(current_year, start_date.month, start_date.day)
        year_end_date = datetime(current_year, end_date.month, end_date.day)

        # Read the Excel file for the current year
        excel_file = pd.read_excel(file, sheet_name=sheet1, engine='openpyxl')

        # Convert the "Sample Date" column to datetime format
        excel_file['Sample Date'] = pd.to_datetime(excel_file['Sample Date'], format='%m/%d/%Y')

        # Filter the DataFrame based on the selected date range
        filtered_data = excel_file[
            (excel_file['Sample Date'] >= year_start_date) &
            (excel_file['Sample Date'] <= year_end_date)
        ]

        # Append the filtered data to the result DataFrame
        result_data = pd.concat([result_data, filtered_data])

        # Increment the current_year
        current_year += 1

    # Sort the result DataFrame by the "Sample Date" column
    sorted_data = result_data.sort_values(by='Sample Date')

    # Perform operations on the sorted DataFrame
    # For example, display the sorted "Sample Date" column
    print(sorted_data['Sample Date'])

    # Save the sorted DataFrame to a new Excel file
    sorted_data.to_excel(output_file, index=False)

# Example usage
file = 'Ra Contamination in Public Water Supplies Merged DNR (time fixed).xlsx'
sheet1 = 'Merged DNR (date fixed)'
output_file = 'Merged DNR 18 years.xlsx'

# Replace with your desired start date in the format 'MM/DD/YYYY'
start_date = '01/01/2000'

# Replace with your desired end date in the format 'MM/DD/YYYY'
end_date = '12/31/2018'

timespan_excel_files(file, sheet1, output_file, start_date, end_date)